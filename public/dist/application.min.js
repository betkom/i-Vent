"use strict";var ApplicationConfiguration=function(){var applicationModuleName="i-vent",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("likes"),ApplicationConfiguration.registerModule("programs"),ApplicationConfiguration.registerModule("users"),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/comments",templateUrl:"modules/comments/views/list-comments.client.view.html"}).state("createComment",{url:"/comments/create",templateUrl:"modules/comments/views/create-comment.client.view.html"}).state("viewComment",{url:"/comments/:commentId",templateUrl:"modules/comments/views/view-comment.client.view.html"}).state("editComment",{url:"/comments/:commentId/edit",templateUrl:"modules/comments/views/edit-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","Authentication","Comments",function($scope,$stateParams,$location,Authentication,Comments){$scope.authentication=Authentication,$scope.create=function(){var comment=new Comments({name:this.name});comment.$save(function(response){$location.path("comments/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(comment){if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("comments")})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("comments/:commentId",{commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("likes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLikes",{url:"/likes",templateUrl:"modules/likes/views/list-likes.client.view.html"}).state("createLike",{url:"/likes/create",templateUrl:"modules/likes/views/create-like.client.view.html"}).state("viewLike",{url:"/likes/:likeId",templateUrl:"modules/likes/views/view-like.client.view.html"}).state("editLike",{url:"/likes/:likeId/edit",templateUrl:"modules/likes/views/edit-like.client.view.html"})}]),angular.module("likes").controller("LikesController",["$scope","$stateParams","$location","Authentication","Likes",function($scope,$stateParams,$location,Authentication,Likes){$scope.authentication=Authentication,$scope.create=function(){var like=new Likes({name:this.name});like.$save(function(response){$location.path("likes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(like){if(like){like.$remove();for(var i in $scope.likes)$scope.likes[i]===like&&$scope.likes.splice(i,1)}else $scope.like.$remove(function(){$location.path("likes")})},$scope.update=function(){var like=$scope.like;like.$update(function(){$location.path("likes/"+like._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.likes=Likes.query()},$scope.findOne=function(){$scope.like=Likes.get({likeId:$stateParams.likeId})}}]),angular.module("likes").factory("Likes",["$resource",function($resource){return $resource("likes/:likeId",{likeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("programs").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Programs","programs","dropdown","/programs(/create)?"),Menus.addSubMenuItem("topbar","programs","List Programs","programs"),Menus.addSubMenuItem("topbar","programs","New Program","programs/create")}]),angular.module("programs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPrograms",{url:"/programs",templateUrl:"modules/programs/views/list-programs.client.view.html"}).state("createProgram",{url:"/programs/create",templateUrl:"modules/programs/views/create-program.client.view.html"}).state("viewProgram",{url:"/programs/:programId",templateUrl:"modules/programs/views/view-program.client.view.html"}).state("editProgram",{url:"/programs/:programId/edit",templateUrl:"modules/programs/views/edit-program.client.view.html"})}]),angular.module("programs").controller("ProgramsController",["$scope","$stateParams","$location","Authentication","Programs","ProgramsComment","Comments","ProgramsLike","Likes",function($scope,$stateParams,$location,Authentication,Programs,ProgramsComment,Comments,ProgramsLike){function fixDate(i){return i=i.toString(),1===i.length?"0"+i:i}$scope.authentication=Authentication;var geocoder;$scope.loadEvents=function(){},$scope.location="",$scope.options2={country:"ng"},$scope.details2="",$scope.today=function(){$scope.dt=new Date;var curr_date=$scope.dt.getDate(),curr_month=$scope.dt.getMonth(),curr_year=$scope.dt.getFullYear();$scope.dt=curr_year+curr_month+curr_date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[1],$scope.stringFiles=[],$scope.onFileSelect=function($file){if($scope.select=$file,"image/gif"===$scope.select[0].type||"image/png"===$scope.select[0].type||"image/jpg"===$scope.select[0].type||"image/jpeg"===$scope.select[0].type){var reader=new FileReader;reader.onload=function(e){$scope.stringFiles.push({path:e.target.result})},reader.readAsDataURL($scope.select[0])}},$scope.create=function(){var program=new Programs({name:this.name,category:this.category,location:this.location,description:this.description,programTime:this.programTime,programDate:this.programDate});program.image=$scope.stringFiles,program.$save(function(response){$location.path("programs/"+response._id),$scope.name="",$scope.location="",$scope.description=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(program){if(program){program.$remove();for(var i in $scope.programs)$scope.programs[i]===program&&$scope.programs.splice(i,1)}else $scope.program.$remove(function(){$location.path("programs")})},$scope.update=function(){var program=$scope.program;program.$update(function(){$location.path("programs/"+program._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.programs=Programs.query()},$scope.findOne=function(){$scope.programContent=Programs.get({programId:$stateParams.programId},function(){$scope.qrcodeUrl="https://api.qrserver.com/v1/create-qr-code/?size=350x350&data=";try{geocoder=new google.maps.Geocoder;var options={zoom:17},map=new google.maps.Map(document.getElementById("map_canvas"),options),sAddress=$scope.programContent.program.location;geocoder.geocode({address:sAddress},function(results,status){status===google.maps.GeocoderStatus.OK&&($scope.marker=new google.maps.Marker({map:map,position:results[0].geometry.location,animation:google.maps.Animation.BOUNCE}),map.setCenter(results[0].geometry.location))})}catch(e0){}$scope.program=$scope.programContent.program;var cdate=new Date($scope.program.programDate);cdate=cdate.getFullYear()+"-"+fixDate(cdate.getMonth()+1)+"-"+fixDate(cdate.getDate());var qrData=encodeURIComponent("Title: "+$scope.program.name+"\nDescription: "+$scope.program.description+"\nDate: "+cdate+"\nLocation: "+$scope.program.location);$scope.qrcodeUrl=$scope.qrcodeUrl+qrData,delete $scope.programContent.program,delete $scope.programContent.userlike;for(var i in $scope.programContent)$scope.program[i]=$scope.programContent[i];$scope.hasLiked=$scope.programContent.userlike?!0:!1}),$scope.comments=ProgramsComment.query({programId:$stateParams.programId})},$scope.addComments=function(){var comment=new ProgramsComment({comment:$scope.newComment});comment.$save({programId:$stateParams.programId},function(){$scope.findOne(),$scope.newComment=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.doLike=function(){var likeObject={like:!0},like=new ProgramsLike(likeObject);like.$save({programId:$stateParams.programId},function(response){if($scope.hasLiked=response,response)if(response.like)$scope.program.likes.push(response._id);else{var i=$scope.program.likes.indexOf(response._id);i>-1&&($scope.program.likes.splice(i,1),$scope.hasLiked=!1)}},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("programs").factory("Programs",["$resource",function($resource){return $resource("programs/:programId",{programId:"@_id"},{update:{method:"PUT"}})}]),angular.module("programs").factory("ProgramsComment",["$resource",function($resource){return $resource("programs/:programId/comments/:commentId",{programId:"@program",commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("programs").factory("ProgramsLike",["$resource",function($resource){return $resource("programs/:programId/likes/:likeId",{programId:"@program",likeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").factory("Search",["$http","$location",function($http,$location){var SearchObject={};return SearchObject.searchResults=[],SearchObject.searchEvents=function(obj){SearchObject.searchResults=[],$http.get("programs/search",{params:obj}).success(function(response){SearchObject.searchResults=response,$location.path("programs/search")})},SearchObject.getSearchResults=function(){return SearchObject.searchResults},SearchObject}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);